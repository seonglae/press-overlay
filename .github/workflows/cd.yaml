name: Release Program

on:
  push:
    tags:
      - '[0-9]\.[0-9]\.[0-9]'

jobs:
  release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set env
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: get-key
        shell: bash
        run: |
          echo "${{ secrets.PFX }}" | base64 --decode > Seonglae.pfx
          echo "${{ secrets.ENV }}" > .env

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.OS }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install npm dependencies
        shell: bash
        run: yarn

      - name: Run build task
        shell: bash
        run: |
          yarn build
          ln build/Screencast*.exe Screencast.exe

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: make artiface
          path: build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ env.RELEASE_VERSION }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Screencast.exe
          asset_name: Screencast.exe
          asset_content_type: application/exe

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: microsoft/winget-pkgs
          ref: master

      - name: Set VERSION env
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Make Manifest
        shell: bash
        run: |
          mkdir manifests/s/Seonglae/Screencast -p
          cd manifests/s/Seonglae/Screencast
          mkdir ${{ env.RELEASE_VERSION }}
          cd ${{ env.RELEASE_VERSION }}
          HASH=$(curl -sL https://github.com/seonglae/screencast/releases/download/${{ env.RELEASE_VERSION }}/Screencast.exe | sha256sum | cut -c-64)

          echo "PackageIdentifier: Seonglae.Screencast" >> Seonglae.Screencast.yaml
          echo "Publisher: Seonglae Cho" >> Seonglae.Screencast.yaml
          echo "PackageName: Screencast" >> Seonglae.Screencast.yaml
          echo "PackageVersion:" ${{ env.RELEASE_VERSION }} >> Seonglae.Screencast.yaml
          echo "License: MIT" >> Seonglae.Screencast.yaml
          echo "InstallerType: nullsoft" >> Seonglae.Screencast.yaml
          echo "Installers:" >> Seonglae.Screencast.yaml
          echo "- Architecture: x64" >> Seonglae.Screencast.yaml
          echo "  InstallerUrl: https://github.com/seonglae/screencast/releases/download/${{ env.RELEASE_VERSION }}/Screencast.exe" >> Seonglae.Screencast.yaml
          echo "  InstallerSha256: ${HASH}" >> Seonglae.Screencast.yaml
          echo "ShortDescription: Press overlay of keyboard and mouse by ahk like vscode screencast" >> Seonglae.Screencast.yaml
          echo "PackageLocale: en-US" >> Seonglae.Screencast.yaml
          echo "ManifestType: singleton" >> Seonglae.Screencast.yaml
          echo "ManifestVersion: 1.0.0" >> Seonglae.Screencast.yaml

      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Submitting Screencast version ${{ env.RELEASE_VERSION }}.yaml
          token: ${{ secrets.PAT }}
          push-to-fork: seonglae/winget-pkgs
          body: |
            - [o] Have you signed the [Contributor License Agreement](https://cla.opensource.microsoft.com/microsoft/winget-pkgs)?
            - [o] Have you checked that there aren't other open [pull requests](https://github.com/microsoft/winget-pkgs/pulls) for the same manifest update/change?
            - [o] Have you validated your manifest locally with `winget validate --manifest <path>`? 
            - [o] Have you tested your manifest locally with `winge@mast install --manifest <path>`?
            - [o] Does your manifest conform to the [1.0 schema](https://github.com/microsoft/winget-cli/blob/master/doc/ManifestSpecv1.0.md)?
          title: Submitting Screencast version ${{ env.RELEASE_VERSION }}.yaml
